-- Install packer
local install_path = vim.fn.stdpath 'data' .. '/site/pack/packer/start/packer.nvim'
local is_bootstrap = false
if vim.fn.empty(vim.fn.glob(install_path)) > 0 then
  is_bootstrap = true
  vim.fn.system { 'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path }
  vim.cmd [[packadd packer.nvim]]
end

require('packer').startup(function(use)
  -- Package manager
  use 'wbthomason/packer.nvim'

  use { -- LSP Configuration & Plugins
    'neovim/nvim-lspconfig',
    requires = {
      -- Automatically install LSPs to stdpath for neovim
      'williamboman/mason.nvim',
      'williamboman/mason-lspconfig.nvim',

      -- Useful status updates for LSP
    {'j-hui/fidget.nvim', tag='legacy', opts={}},

      -- Additional lua configuration, makes nvim stuff amazing
      'folke/neodev.nvim',
    },
  }

  use { -- Autocompletion
    'hrsh7th/nvim-cmp',
    requires = { 'hrsh7th/cmp-buffer',
  --    'hrsh7th/cmp-path',
      'hrsh7th/cmp-nvim-lsp',
  --    'hrsh7th/cmp-nvim-lsp-signature-help',
  --    'quangnguyen30192/cmp-nvim-ultisnips',
  --    'L3MON4D3/LuaSnip',
  --    'saadparwaiz1/cmp_luasnip'
    },
  }


  use { -- Highlight, edit, and navigate code
    'nvim-treesitter/nvim-treesitter',
    run = function()
      pcall(require('nvim-treesitter.install').update { with_sync = true })
    end,
  }

  use { -- Additional text objects via treesitter
    'nvim-treesitter/nvim-treesitter-textobjects',
    after = 'nvim-treesitter',
  }

  use { -- CodeActionMenu
    'weilbith/nvim-code-action-menu',
    cmd = 'CodeActionMenu',
  }

  use { -- Harpoon
    'theprimeagen/harpoon',
  }

  use { -- Vim-signature
    'kshenoy/vim-signature',
  }

  --use { -- Vim-bookmarks
  --  'MattesGroeger/vim-bookmarks'
  --}

  --use { -- Vim-signature
  --  'chentoast/marks.nvim',
  --}

  use { -- UndoTree
    'mbbill/undotree',
  }

  use { -- HLSL Syntax highlighting
    'kalvinpearce/ShaderHighlight',
  }

  use { -- Floaterm
    'voldikss/vim-floaterm'
  }

  --use { -- Gutentags
  --  'ludovicchabant/vim-gutentags'
  --}

  use { -- Useless plugin 
    'eandrju/cellular-automaton.nvim',
    cmd = 'CellularAutomaton'
  }

  --use { -- Github Copilot
  --  'github/copilot.vim'
  --}

  use { -- chatGPT text to colorscheme
    'svermeulen/text-to-colorscheme.nvim'
  }

  use { -- ripgrep
    'duane9/nvim-rg',
    cmd = 'Rg'
  }

  use { -- completion-nvim
    'nvim-lua/completion-nvim'
  }

  --use { --coc
    --'neoclide/coc.nvim', branch = 'release', run = 'npm ci'
  --}

--[[
  use { -- ulti-snips
    'SirVer/ultisnips'
  }

  use { -- vim-unreal
    'drichardson/vim-unreal'
  }
--]]

  use { -- vim-visual-multi
    'mg979/vim-visual-multi'
  }

  use { -- modus-theme
    'ishan9299/modus-theme-vim'
  }

  use { -- leuven-theme
    'gzagatti/vim-leuven-theme'
  }

  use { -- pandoc
    'aspeddro/pandoc.nvim'
  }

  use { --godbolt
    'p00f/godbolt.nvim'
  }

  use { --disassemble
    'mdedonno1337/disassemble.nvim'
  }

--  use { -- markdown-preview
--    "iamcco/markdown-preview.nvim",
--  }

vim.o.background = "dark";
require('text-to-colorscheme').setup {
    ai = {
        openai_api_key = os.getenv("OPENAI_API_KEY"),
        gpt_model = "gpt-3.5-turbo-0613";
    },
}

-- Floaterm
vim.keymap.set('n', '<leader>T', ':FloatermNew<CR>')

-- Saves the current file and then runs it with Python
--local RunPython = function()
--    vim.cmd(':w')
--    vim.cmd(':AsyncRun python %')
--end
--vim.cmd([[
--  autocmd FileType python nnoremap <buffer> <F9> :w<CR>:exec '!python'shellescape(@%, 1)<CR>
--  autocmd FileType python inoremap <buffer> <F9> <ESC>:w<CR>:exec '!python'shellescape(@%, 1)<CR>
--]])
--

local Build = function()
    vim.cmd(':copen')

    local is_windows = vim.fn.has('win32') == 1
    local build_cmd = is_windows and 'build.bat' or 'build.sh'
    if is_windows then
      vim.cmd(':AsyncRun ' .. build_cmd)
    else
      vim.cmd(':AsyncRun ./' .. build_cmd)
    end

    --vim.cmd(':AsyncRun build.bat')
    --vim.cmd(':AsyncRun ' .. build_cmd)
end

local OpenUE = function()
    vim.cmd(':AsyncRun editor.bat')
    vim.cmd(':cclose')
    print("Opening UE..")
end

-- Run build batch for for unreal engine projects
vim.keymap.set('n', '<A-b>', function() Build() end)
-- Open project in unreal editor
vim.keymap.set('n', '<A-e>', function() OpenUE() end)

-- Rip Grep Prompt
local function rg()
  local input = vim.fn.input('Search Pattern: ')
  if input ~= '' then
    vim.cmd('Rg -n -i ' .. input)
  end
end

--vim.cmd('command! RgPrompt lua rg()')
vim.keymap.set('n', '<leader>rg', function() rg() end)

-- Copilot
--vim.g.copilot_no_tab_map = True
--vim.api.nvim_set_keymap('i', '<leader>c', 'copilot#Accept("<CR>")', { silent = true, expr = true})
--vim.api.nvim_set_keymap('i', '<M-c>', 'copilot#Accept("<CR>")', { silent = true, expr = true})
--vim.keymap.set('i', '<M-.>', '<Plug>(copilot-next)')
--vim.keymap.set('i', '<M-,>', '<Plug>(copilot-previous)')

-- Harpoon
local mark = require('harpoon.mark')
local ui = require('harpoon.ui')
vim.keymap.set('n', '<C-a>', mark.add_file)
vim.keymap.set('n', '<C-e>', ui.toggle_quick_menu)
vim.keymap.set('n', '<F1>', function() ui.nav_file(1) end)
vim.keymap.set('n', '<F2>', function() ui.nav_file(2) end)
vim.keymap.set('n', '<F3>', function() ui.nav_file(3) end)
vim.keymap.set('n', '<F4>', function() ui.nav_file(4) end)

-- UndoTree
--vim.keymap.set('n', '<F5>', vim.cmd.UndotreeToggle)

  -- Git related plugins
  use 'tpope/vim-fugitive'
  use 'tpope/vim-rhubarb'
  use 'lewis6991/gitsigns.nvim'

  use 'navarasu/onedark.nvim' -- Theme inspired by Atom
  use 'nvim-lualine/lualine.nvim' -- Fancier statusline
  use 'lukas-reineke/indent-blankline.nvim' -- Add indentation guides even on blank lines
  use 'numToStr/Comment.nvim' -- "gc" to comment visual regions/lines
  --use 'tpope/vim-sleuth' -- Detect tabstop and shiftwidth automatically

  -- Fuzzy Finder (files, lsp, etc)
  use { 'nvim-telescope/telescope.nvim', branch = '0.1.x', requires = { 'nvim-lua/plenary.nvim' } }

  -- Fuzzy Finder Algorithm which requires local dependencies to be built. Only load if `make` is available
  use { 'nvim-telescope/telescope-fzf-native.nvim', run = 'make', cond = vim.fn.executable 'make' == 1 }

  -- ZenMode
  use { 'folke/zen-mode.nvim',
        config = function()
        require("zen-mode").setup {
          window = {
  		    backdrop = 1.0,
  		    width = 0.85,
        }
      }
    end
  }

  -- Asyncrun
  use { 'skywind3000/asyncrun.vim'}

  -- Themes
  use('rose-pine/neovim')
  use("ellisonleao/gruvbox.nvim")
  use("franbach/miramare")
  use("phha/zenburn.nvim")
  use("nyoom-engineering/oxocarbon.nvim")
  use("folke/tokyonight.nvim")
  use{"catppuccin/nvim", as = "catppuccin"}
  use("Shatur/neovim-ayu")
  use("blazkowolf/gruber-darker.nvim")

  -- Add custom plugins to packer from ~/.config/nvim/lua/custom/plugins.lua
  local has_plugins, plugins = pcall(require, 'custom.plugins')
  if has_plugins then
    plugins(use)
  end

  if is_bootstrap then
    require('packer').sync()
  end
end)

-- When we are bootstrapping a configuration, it doesn't
-- make sense to execute the rest of the init.lua.
--
-- You'll need to restart nvim, and then it will work.
if is_bootstrap then
  print '=================================='
  print '    Plugins are being installed'
  print '    Wait until Packer completes,'
  print '       then restart nvim'
  print '=================================='
  return
end

-- Automatically source and re-compile packer whenever you save this init.lua
local packer_group = vim.api.nvim_create_augroup('Packer', { clear = true })
vim.api.nvim_create_autocmd('BufWritePost', {
  command = 'source <afile> | PackerCompile',
  group = packer_group,
  pattern = vim.fn.expand '$MYVIMRC',
})

-- neovide only settings
local is_full_screen = true;
local ToggleFullscreen = function(toggle_fullscreen)
    vim.g.neovide_fullscreen = toggle_fullscreen
    is_full_screen = not is_full_screen
end

if vim.g.neovide then
  vim.opt.guifont = {'Liberation Mono', 'h10'}
  vim.g.neovide_cursor_vfx_mode = 'pixiedust'
  vim.g.neovide_cursor_vfx_particle_lifetime = 2.4
  vim.g.neovide_cursor_vfx_particle_density = 14
  vim.keymap.set("n", "<F12>", function() ToggleFullscreen(is_full_screen) end)
end
-- [[ Setting options ]]
-- See `:help vim.o`

-- Set highlight on search
vim.o.hlsearch = false
vim.o.incsearch = true

-- Make line numbers default
vim.wo.number = true
vim.wo.relativenumber = true

-- Indents
vim.opt.tabstop = 4
vim.opt.softtabstop = 4
vim.opt.shiftwidth = 4
vim.opt.expandtab = true
vim.opt.smartindent = false
vim.opt.wrap = false
vim.opt.autoindent = false
vim.opt.cindent = true

-- Enable mouse mode
vim.o.mouse = 'a'

-- Enable break indent
vim.o.breakindent = true

-- Save undo history
vim.o.undofile = true

-- Case insensitive searching UNLESS /C or capital in search
vim.o.ignorecase = true
vim.o.smartcase = true

-- Decrease update time
vim.o.updatetime = 250
--vim.o.updatetime = 50
vim.wo.signcolumn = 'yes'

-- Set colorscheme
vim.o.termguicolors = true
--vim.cmd [[colorscheme ghdark]]
--vim.cmd [[colorscheme lightning]]
--vim.cmd [[colorscheme gruvbox]]
--vim.cmd [[colorscheme ayu]]
vim.cmd [[colorscheme ayu-dark]]
--vim.cmd [[colorscheme rose-pine]]
vim.cmd [[highlight clear signcolumn]]
-- Transparency
vim.g.is_transparent = 0
function ToggleTransparency()
  if vim.g.is_transparent == 0 then
    -- Set the background to transparent
    vim.cmd [[highlight clear signcolumn]]
    vim.cmd("highlight Normal guibg=none")
    vim.cmd("highlight NormalNC guibg=none")
    vim.cmd("highlight NonText guibg=none")
    vim.cmd("highlight Normal ctermbg=none")
    vim.cmd("highlight NormalNC ctermbg=none")
    vim.cmd("highlight NonText ctermbg=none")
    vim.g.is_transparent = 1
  else
    -- Reset the background color
    vim.cmd('set background=dark')
    vim.g.is_transparent = 0
  end
end
vim.api.nvim_set_keymap('n', '<F11>', ':lua ToggleTransparency()<CR>', {noremap=true, silent=true})

-- Set completeopt to have a better completion experience
vim.o.completeopt = 'menuone,noselect'

-- [[ Basic Keymaps ]]
-- Set <space> as the leader key
-- See `:help mapleader`
--  NOTE: Must happen before plugins are required (otherwise wrong leader will be used)
vim.g.mapleader = ' '
vim.g.maplocalleader = ' '

-- Move 
vim.keymap.set("v", "J", ":m '>+1<CR>gv=gv")
vim.keymap.set("v", "K", ":m '<-2<CR>gv=gv")

-- Greatest remap ever -ThePrimeagen
vim.keymap.set("x", "<leader>p", "\"_dP")

-- CodeActionMenu
vim.keymap.set('n', '<leader>ca', ':CodeActionMenu')

-- Keymaps for better default experience
-- See `:help vim.keymap.set()`
vim.keymap.set({ 'n', 'v' }, '<Space>', '<Nop>', { silent = true })

-- Toggle ZenMode
vim.keymap.set('n', '<leader>zm', require('zen-mode').toggle, { desc = '[Z]en [M]ode' })

-- Remap for dealing with word wrap
vim.keymap.set('n', 'k', "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })
vim.keymap.set('n', 'j', "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })

-- [[ Highlight on yank ]]
-- See `:help vim.highlight.on_yank()`
local highlight_group = vim.api.nvim_create_augroup('YankHighlight', { clear = true })
vim.api.nvim_create_autocmd('TextYankPost', {
  callback = function()
    vim.highlight.on_yank()
  end,
  group = highlight_group,
  pattern = '*',
})

-- Set lualine as statusline
-- See `:help lualine.txt`
require('lualine').setup {
  options = {
    icons_enabled = false,
    component_separators = '|',
    section_separators = '',
  },
}

-- Enable Comment.nvim
require('Comment').setup()

-- Enable `lukas-reineke/indent-blankline.nvim`
-- See `:help indent_blankline.txt`
--require('indent_blankline').setup {
--  char = '',
--  --char = '┊',
--  show_trailing_blankline_indent = false,
--}

-- Gitsigns
-- See `:help gitsigns.txt`
--[[
require('gitsigns').setup {
  signs = {
    add = { text = '+' },
    change = { text = '~' },
    delete = { text = '_' },
    topdelete = { text = '‾' },
    changedelete = { text = '~' },
  },
}
--]]

-- [[ Configure Telescope ]]
-- See `:help telescope` and `:help telescope.setup()`
require('telescope').setup {
  defaults = {
    mappings = {
      i = {
        ['<C-u>'] = false,
        ['<C-d>'] = false,
      },
    },
  },
}

-- Enable telescope fzf native, if installed
pcall(require('telescope').load_extension, 'fzf')

-- See `:help telescope.builtin`
vim.keymap.set('n', '<leader>?', require('telescope.builtin').oldfiles, { desc = '[?] Find recently opened files' })
vim.keymap.set('n', '<leader><space>', require('telescope.builtin').buffers, { desc = '[ ] Find existing buffers' })
vim.keymap.set('n', '<leader>/', function()
  -- You can pass additional configuration to telescope to change theme, layout, etc.
  require('telescope.builtin').current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
    winblend = 10,
    previewer = false,
  })
end, { desc = '[/] Fuzzily search in current buffer]' })

vim.keymap.set('n', '<leader>sf', require('telescope.builtin').find_files, { desc = '[S]earch [F]iles' })
vim.keymap.set('n', '<leader>sh', require('telescope.builtin').help_tags, { desc = '[S]earch [H]elp' })
vim.keymap.set('n', '<leader>sw', require('telescope.builtin').grep_string, { desc = '[S]earch current [W]ord' })
vim.keymap.set('n', '<leader>sg', require('telescope.builtin').live_grep, { desc = '[S]earch by [G]rep' })
vim.keymap.set('n', '<leader>sd', require('telescope.builtin').diagnostics, { desc = '[S]earch [D]iagnostics' })

-- [[ Configure Treesitter ]]
-- See `:help nvim-treesitter`
require('nvim-treesitter.configs').setup {
  -- Add languages to be installed here that you want installed for treesitter
  ensure_installed = { 'c', 'cpp', 'go', 'lua', 'python', 'rust', 'typescript', 'help' },

  highlight = { enable = true },
  indent = { enable = true, disable = { 'python' } },
  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = '<c-space>',
      node_incremental = '<c-space>',
      scope_incremental = '<c-s>',
      node_decremental = '<c-backspace>',
    },
  },
  textobjects = {
    select = {
      enable = true,
      lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
      keymaps = {
        -- You can use the capture groups defined in textobjects.scm
        ['aa'] = '@parameter.outer',
        ['ia'] = '@parameter.inner',
        ['af'] = '@function.outer',
        ['if'] = '@function.inner',
        ['ac'] = '@class.outer',
        ['ic'] = '@class.inner',
      },
    },
    move = {
      enable = true,
      set_jumps = true, -- whether to set jumps in the jumplist
      goto_next_start = {
        [']m'] = '@function.outer',
        [']]'] = '@class.outer',
      },
      goto_next_end = {
        [']M'] = '@function.outer',
        [']['] = '@class.outer',
      },
      goto_previous_start = {
        ['[m'] = '@function.outer',
        ['[['] = '@class.outer',
      },
      goto_previous_end = {
        ['[M'] = '@function.outer',
        ['[]'] = '@class.outer',
      },
    },
    swap = {
      enable = true,
      swap_next = {
        ['<leader>a'] = '@parameter.inner',
      },
      swap_previous = {
        ['<leader>A'] = '@parameter.inner',
      },
    },
  },
}

-- Diagnostic keymaps
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
vim.keymap.set('n', '<leader>e', vim.diagnostic.open_float)
vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist)

-- LSP settings.
--  This function gets run when an LSP connects to a particular buffer.
local on_attach = function(_, bufnr)
  -- NOTE: Remember that lua is a real programming language, and as such it is possible
  -- to define small helper and utility functions so you don't have to repeat yourself
  -- many times.
  --
  -- In this case, we create a function that lets us more easily define mappings specific
  -- for LSP related items. It sets the mode, buffer and description for us each time.
  local nmap = function(keys, func, desc)
    if desc then
      desc = 'LSP: ' .. desc
    end

    vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
  end

  nmap('<leader>rn', vim.lsp.buf.rename, '[R]e[n]ame')
  nmap('<leader>ca', vim.lsp.buf.code_action, '[C]ode [A]ction')

  nmap('gd', vim.lsp.buf.definition, '[G]oto [D]efinition')
  nmap('gr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
  nmap('gI', vim.lsp.buf.implementation, '[G]oto [I]mplementation')
  nmap('<leader>D', vim.lsp.buf.type_definition, 'Type [D]efinition')
  nmap('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
  nmap('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')

  -- See `:help K` for why this keymap
  nmap('K', vim.lsp.buf.hover, 'Hover Documentation')
  nmap('<C-k>', vim.lsp.buf.signature_help, 'Signature Documentation')

  -- Lesser used LSP functionality
  nmap('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')
  nmap('<leader>wa', vim.lsp.buf.add_workspace_folder, '[W]orkspace [A]dd Folder')
  nmap('<leader>wr', vim.lsp.buf.remove_workspace_folder, '[W]orkspace [R]emove Folder')
  nmap('<leader>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, '[W]orkspace [L]ist Folders')

  -- Create a command `:Format` local to the LSP buffer
  vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
    vim.lsp.buf.format()
  end, { desc = 'Format current buffer with LSP' })
end

-- Enable the following language servers
--  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
--
--  Add any additional override configuration in the following tables. They will be passed to
--  the `settings` field of the server config. You must look up that documentation yourself.
local servers = {
  -- clangd = {},
  -- gopls = {},
  -- pyright = {},
  -- rust_analyzer = {},
  -- tsserver = {},

--[[
  sumneko_lua = {
    Lua = {
      workspace = { checkThirdParty = false },
      telemetry = { enable = false },
    },
  },
--]]
}


--
-- clangd
local lspconfig = require('lspconfig')
lspconfig.clangd.setup(
{
    cmd = {
        "clangd",
        "--background-index",
        "--suggest-missing-includes",
        --"--clang",
        "--clang-tidy",
        "-Wall",
        "--header-insertion=never"
        --"--header-insertion=iwyu"
    }
})

vim.lsp.handlers['textDocument/publishDiagnostics'] = function()
end
vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, {
    virtual_text = true,
    signs = true,
    underline = true,
    update_in_insert = true,
    }
)

local default_capabilities = {
  textDocument = {
    completion = {
      editsNearCursor = true,
    },
  },
  offsetEncoding = {'utf-8', 'utf-16' },
}

require'lspconfig'.glslls.setup {
  cmd = { 'glslls' }, -- GLSL lsp executable from (https://github.com/svenstaro/glsl-language-server)
  filetypes = {'glsl'},
  single_file_support = true,
  capabilities = default_capabilities,
}

-- Setup neovim lua configuration
require('neodev').setup()

-- nvim-cmp supports additional completion capabilities, so broadcast that to servers
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

-- Setup mason so it can manage external tooling
require('mason').setup()

-- Ensure the servers above are installed
local mason_lspconfig = require 'mason-lspconfig'

mason_lspconfig.setup {
  ensure_installed = vim.tbl_keys(servers),
}

mason_lspconfig.setup_handlers {
  function(server_name)
    require('lspconfig')[server_name].setup {
      capabilities = capabilities,
      on_attach = on_attach,
      --flags = {
      --  debounce_text_changes = 150
      --},
      settings = servers[server_name],
    }
  end,
}

-- Turn on lsp status information
require('fidget').setup()

-- nvim-cmp setup
local cmp = require 'cmp'
--local luasnip = require 'luasnip'

cmp.setup {
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end,
  },
  mapping = cmp.mapping.preset.insert {
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<CR>'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    },
    ['<Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif luasnip.expand_or_jumpable() then
        luasnip.expand_or_jump()
      else
        fallback()
      end
    end, { 'i', 's' }),
    ['<S-Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
      end
    end, { 'i', 's' }),
  },
  sources = {
    --{ name = 'buffer' },
    --{ name = 'path' },
    { name = 'nvim_lsp' },
    { name = 'nvim_lsp_signature_help' },
    --{ name = 'luasnip' },
    --{ name = 'ultisnips' },
  },
}


-- Godbolt
require("godbolt").setup({
    languages = {
        cpp = { compiler = "g122", options = {} },
        c = { compiler = "cg122", options = {} },
        rust = { compiler = "r1650", options = {} },
        -- any_additional_filetype = { compiler = ..., options = ... },
    },
    quickfix = {
        enable = false, -- whether to populate the quickfix list in case of errors
        auto_open = false -- whether to open the quickfix list in case of errors
    },
    url = "https://godbolt.org" -- can be changed to a different godbolt instance
})

-- The line beneath this is called `modeline`. See `:help modeline`
-- vim: ts=2 sts=2 sw=2 et
